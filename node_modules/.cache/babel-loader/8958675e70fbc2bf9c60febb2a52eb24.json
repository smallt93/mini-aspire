{"ast":null,"code":"/* eslint-disable global-require */\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { routerMiddleware } from 'connected-react-router';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from '../reducers/index';\nimport rootSaga from '../sagas/index'; // Build the middleware for intercepting and dispatching navigation actions\n// const middleware = routerMiddleware(history);\n\nconst sagaMiddleware = createSagaMiddleware();\nexport default function configureStore(initialState = {}, history = {}) {\n  let store;\n  const historyMiddleware = routerMiddleware(history);\n  const persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['news']\n  };\n\n  if (module.hot) {\n    // Support hot reloading of components\n    // Enable Webpack hot module replacement for reducers\n    const composeEnhancers = composeWithDevTools({});\n    const devToolMiddleware = composeEnhancers(applyMiddleware(historyMiddleware, sagaMiddleware));\n    store = createStore(persistReducer(persistConfig, rootReducer(history)), initialState, devToolMiddleware);\n    module.hot.accept('../reducers', () => {\n      const nextRootReducer = require('../reducers/index');\n\n      store.replaceReducer(nextRootReducer);\n    });\n  } else {\n    store = createStore(persistReducer(persistConfig, rootReducer(history)), initialState, applyMiddleware(historyMiddleware, sagaMiddleware));\n  }\n\n  sagaMiddleware.run(rootSaga);\n  const persistor = persistStore(store, null);\n  return {\n    store,\n    persistor\n  };\n}","map":{"version":3,"sources":["/Users/mr942/Projects/mini-aspire/src/store/configureStore.js"],"names":["createStore","applyMiddleware","createSagaMiddleware","routerMiddleware","composeWithDevTools","persistStore","persistReducer","storage","rootReducer","rootSaga","sagaMiddleware","configureStore","initialState","history","store","historyMiddleware","persistConfig","key","whitelist","module","hot","composeEnhancers","devToolMiddleware","accept","nextRootReducer","require","replaceReducer","run","persistor"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,QAAP,MAAqB,gBAArB,C,CAEA;AACA;;AAEA,MAAMC,cAAc,GAAGR,oBAAoB,EAA3C;AAEA,eAAe,SAASS,cAAT,CAAwBC,YAAY,GAAG,EAAvC,EAA2CC,OAAO,GAAG,EAArD,EAAyD;AACtE,MAAIC,KAAJ;AAEA,QAAMC,iBAAiB,GAAGZ,gBAAgB,CAACU,OAAD,CAA1C;AAEA,QAAMG,aAAa,GAAG;AACpBC,IAAAA,GAAG,EAAE,MADe;AAEpBV,IAAAA,OAFoB;AAGpBW,IAAAA,SAAS,EAAE,CAAC,MAAD;AAHS,GAAtB;;AAMA,MAAIC,MAAM,CAACC,GAAX,EAAgB;AACd;AACA;AACA,UAAMC,gBAAgB,GAAGjB,mBAAmB,CAAC,EAAD,CAA5C;AACA,UAAMkB,iBAAiB,GAAGD,gBAAgB,CACxCpB,eAAe,CACbc,iBADa,EAEbL,cAFa,CADyB,CAA1C;AAOAI,IAAAA,KAAK,GAAGd,WAAW,CACjBM,cAAc,CAACU,aAAD,EAAgBR,WAAW,CAACK,OAAD,CAA3B,CADG,EAEjBD,YAFiB,EAGjBU,iBAHiB,CAAnB;AAMAH,IAAAA,MAAM,CAACC,GAAP,CAAWG,MAAX,CAAkB,aAAlB,EAAiC,MAAM;AACrC,YAAMC,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA/B;;AACAX,MAAAA,KAAK,CAACY,cAAN,CAAqBF,eAArB;AACD,KAHD;AAID,GArBD,MAqBO;AACLV,IAAAA,KAAK,GAAGd,WAAW,CACjBM,cAAc,CAACU,aAAD,EAAgBR,WAAW,CAACK,OAAD,CAA3B,CADG,EAEjBD,YAFiB,EAGjBX,eAAe,CAACc,iBAAD,EAAoBL,cAApB,CAHE,CAAnB;AAKD;;AAEDA,EAAAA,cAAc,CAACiB,GAAf,CAAmBlB,QAAnB;AACA,QAAMmB,SAAS,GAAGvB,YAAY,CAACS,KAAD,EAAQ,IAAR,CAA9B;AAEA,SAAO;AAAEA,IAAAA,KAAF;AAASc,IAAAA;AAAT,GAAP;AACD","sourcesContent":["/* eslint-disable global-require */\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { routerMiddleware } from 'connected-react-router';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from '../reducers/index';\nimport rootSaga from '../sagas/index';\n\n// Build the middleware for intercepting and dispatching navigation actions\n// const middleware = routerMiddleware(history);\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(initialState = {}, history = {}) {\n  let store;\n\n  const historyMiddleware = routerMiddleware(history);\n\n  const persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['news'],\n  };\n\n  if (module.hot) {\n    // Support hot reloading of components\n    // Enable Webpack hot module replacement for reducers\n    const composeEnhancers = composeWithDevTools({});\n    const devToolMiddleware = composeEnhancers(\n      applyMiddleware(\n        historyMiddleware,\n        sagaMiddleware,\n      ),\n    );\n\n    store = createStore(\n      persistReducer(persistConfig, rootReducer(history)),\n      initialState,\n      devToolMiddleware,\n    );\n\n    module.hot.accept('../reducers', () => {\n      const nextRootReducer = require('../reducers/index');\n      store.replaceReducer(nextRootReducer);\n    });\n  } else {\n    store = createStore(\n      persistReducer(persistConfig, rootReducer(history)),\n      initialState,\n      applyMiddleware(historyMiddleware, sagaMiddleware),\n    );\n  }\n\n  sagaMiddleware.run(rootSaga);\n  const persistor = persistStore(store, null);\n\n  return { store, persistor };\n}\n"]},"metadata":{},"sourceType":"module"}