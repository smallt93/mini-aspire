{"ast":null,"code":"import { all, call, put, takeLeading, takeEvery, select } from 'redux-saga/effects';\nimport { push, getLocation } from 'connected-react-router';\nimport * as AuthAPIs from '../../apis/auth';\nimport { actions as AuthActions, AUTH_REGISTER_USER, AUTH_LOGOUT } from '../../reducers/auth';\nexport function* userRegistration({\n  userData\n}) {\n  try {\n    const userResponseData = yield call(AuthAPIs.userRegister, userData);\n    const error = null;\n    if (error) throw error;\n    yield put(AuthActions.userRegisterSuccess(userResponseData));\n    yield put(AuthActions.loginSuccess());\n  } catch (error) {\n    yield put(AuthActions.userRegisterFailed(error));\n  }\n}\n\nfunction* handleLogin({\n  loginValue\n}) {\n  try {\n    const loginData = yield call(AuthAPIs.login, loginValue);\n    console.log(\"TCL: loginData\", loginData);\n    const error = null;\n    if (error) throw error;\n    yield put(AuthActions.loginSuccess());\n  } catch (error) {\n    yield put(AuthActions.loginFailed(error));\n  }\n} // function* handleTeacherLogin({ payload }) {\n//   try {\n//     const { email, password } = payload;\n//     const { response, error } = yield call(AuthAPIs.getTeacherToken, email, password);\n//     if (error) throw error;\n//     const { data } = response;\n//     const { user, tokens } = data;\n//     const { access: token, refresh: refreshToken } = tokens;\n//     configToken(token);\n//     yield put(AuthActions.loginSuccess(token, refreshToken, user));\n//   } catch (error) {\n//     yield put(AuthActions.loginFailed(error));\n//   }\n// }\n\n\nfunction* handleLogout() {\n  const location = yield select(getLocation);\n  const pathname = location.pathname;\n\n  if (pathname !== '/login') {\n    yield put(push('/login'));\n  }\n}\n\nexport default function* authSaga() {\n  yield all([takeLeading(AUTH_REGISTER_USER, userRegistration), takeEvery(AUTH_LOGOUT, handleLogout)]);\n}","map":{"version":3,"sources":["/Users/mr942/Projects/mini-aspire/src/sagas/auth/authSaga.js"],"names":["all","call","put","takeLeading","takeEvery","select","push","getLocation","AuthAPIs","actions","AuthActions","AUTH_REGISTER_USER","AUTH_LOGOUT","userRegistration","userData","userResponseData","userRegister","error","userRegisterSuccess","loginSuccess","userRegisterFailed","handleLogin","loginValue","loginData","login","console","log","loginFailed","handleLogout","location","pathname","authSaga"],"mappings":"AAAA,SACEA,GADF,EACOC,IADP,EACaC,GADb,EAEEC,WAFF,EAGEC,SAHF,EAGaC,MAHb,QAIO,oBAJP;AAKA,SAASC,IAAT,EAAeC,WAAf,QAAkC,wBAAlC;AACA,OAAO,KAAKC,QAAZ,MAA0B,iBAA1B;AACA,SACEC,OAAO,IAAIC,WADb,EAEEC,kBAFF,EAGEC,WAHF,QAIO,qBAJP;AAMA,OAAO,UAAUC,gBAAV,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAyC;AAC9C,MAAI;AACF,UAAMC,gBAAgB,GAAG,MAAMd,IAAI,CAACO,QAAQ,CAACQ,YAAV,EAAwBF,QAAxB,CAAnC;AACA,UAAMG,KAAK,GAAG,IAAd;AAEA,QAAIA,KAAJ,EAAW,MAAMA,KAAN;AAEX,UAAMf,GAAG,CAACQ,WAAW,CAACQ,mBAAZ,CAAgCH,gBAAhC,CAAD,CAAT;AACA,UAAMb,GAAG,CAACQ,WAAW,CAACS,YAAZ,EAAD,CAAT;AACD,GARD,CAQE,OAAOF,KAAP,EAAc;AACd,UAAMf,GAAG,CAACQ,WAAW,CAACU,kBAAZ,CAA+BH,KAA/B,CAAD,CAAT;AACD;AACF;;AAED,UAAUI,WAAV,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAsC;AACpC,MAAI;AACF,UAAMC,SAAS,GAAG,MAAMtB,IAAI,CAACO,QAAQ,CAACgB,KAAV,EAAiBF,UAAjB,CAA5B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,SAA9B;AACA,UAAMN,KAAK,GAAG,IAAd;AACA,QAAIA,KAAJ,EAAW,MAAMA,KAAN;AAEX,UAAMf,GAAG,CAACQ,WAAW,CAACS,YAAZ,EAAD,CAAT;AACD,GAPD,CAOE,OAAOF,KAAP,EAAc;AACd,UAAMf,GAAG,CAACQ,WAAW,CAACiB,WAAZ,CAAwBV,KAAxB,CAAD,CAAT;AACD;AACF,C,CAED;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,UAAUW,YAAV,GAAyB;AACvB,QAAMC,QAAQ,GAAG,MAAMxB,MAAM,CAACE,WAAD,CAA7B;AADuB,QAEfuB,QAFe,GAEFD,QAFE,CAEfC,QAFe;;AAIvB,MAAIA,QAAQ,KAAK,QAAjB,EAA2B;AACzB,UAAM5B,GAAG,CAACI,IAAI,CAAC,QAAD,CAAL,CAAT;AACD;AACF;;AAED,eAAe,UAAUyB,QAAV,GAAqB;AAClC,QAAM/B,GAAG,CAAC,CACRG,WAAW,CAACQ,kBAAD,EAAqBE,gBAArB,CADH,EAERT,SAAS,CAACQ,WAAD,EAAcgB,YAAd,CAFD,CAAD,CAAT;AAID","sourcesContent":["import {\n  all, call, put,\n  takeLeading,\n  takeEvery, select,\n} from 'redux-saga/effects';\nimport { push, getLocation } from 'connected-react-router';\nimport * as AuthAPIs from '../../apis/auth';\nimport {\n  actions as AuthActions,\n  AUTH_REGISTER_USER,\n  AUTH_LOGOUT,\n} from '../../reducers/auth';\n\nexport function* userRegistration({ userData }) {\n  try {\n    const userResponseData = yield call(AuthAPIs.userRegister, userData);\n    const error = null;\n    \n    if (error) throw error;\n\n    yield put(AuthActions.userRegisterSuccess(userResponseData));\n    yield put(AuthActions.loginSuccess());\n  } catch (error) {\n    yield put(AuthActions.userRegisterFailed(error));\n  }\n}\n\nfunction* handleLogin({ loginValue }) {\n  try {\n    const loginData = yield call(AuthAPIs.login, loginValue);\n    console.log(\"TCL: loginData\", loginData)\n    const error = null;\n    if (error) throw error;\n\n    yield put(AuthActions.loginSuccess());\n  } catch (error) {\n    yield put(AuthActions.loginFailed(error));\n  }\n}\n\n// function* handleTeacherLogin({ payload }) {\n//   try {\n//     const { email, password } = payload;\n//     const { response, error } = yield call(AuthAPIs.getTeacherToken, email, password);\n\n//     if (error) throw error;\n\n//     const { data } = response;\n//     const { user, tokens } = data;\n//     const { access: token, refresh: refreshToken } = tokens;\n\n//     configToken(token);\n//     yield put(AuthActions.loginSuccess(token, refreshToken, user));\n//   } catch (error) {\n//     yield put(AuthActions.loginFailed(error));\n//   }\n// }\n\nfunction* handleLogout() {\n  const location = yield select(getLocation);\n  const { pathname } = location;\n\n  if (pathname !== '/login') {\n    yield put(push('/login'));\n  }\n}\n\nexport default function* authSaga() {\n  yield all([\n    takeLeading(AUTH_REGISTER_USER, userRegistration),\n    takeEvery(AUTH_LOGOUT, handleLogout),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}