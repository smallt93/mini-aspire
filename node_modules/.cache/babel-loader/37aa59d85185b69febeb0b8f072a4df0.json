{"ast":null,"code":"import _objectWithoutProperties from \"/Users/mr942/Projects/mini-aspire/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/mr942/Projects/mini-aspire/src/components/FormInput/FormInput.js\";\nimport React from 'react';\nimport { func, bool, shape, any, string } from 'prop-types';\nimport { Field, getIn } from 'formik';\nimport _ from 'lodash';\nimport Select from 'react-select';\nimport DatePicker from 'react-datepicker';\nimport FormLabel from './FormLabel';\nimport { FormItem, FormError, FormInputStyled, FormInputWrapperStyled, FormCheckboxStyled } from './Form.style';\nimport 'react-datepicker/dist/react-datepicker.css';\nexport const INPUT_TYPES = {\n  TEXT: 'text',\n  NUMBER: 'number',\n  PHONE_NUMBER: 'phoneNumber',\n  CHECKBOX: 'checkbox',\n  SELECT: 'select',\n  TEXT_AREA: 'textarea',\n  DATE_PICKER: 'date'\n};\nconst FORM_LAYOUT = {\n  labelCol: {\n    xs: 24,\n    sm: 24\n  },\n  wrapperCol: {\n    xs: 24,\n    sm: 24\n  }\n};\n\nclass FormInput extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.renderTextInput = (_ref) => {\n      let field = _ref.field,\n          _ref$form = _ref.form,\n          touched = _ref$form.touched,\n          errors = _ref$form.errors,\n          form = _ref.form,\n          props = _objectWithoutProperties(_ref, [\"field\", \"form\", \"form\"]);\n\n      const inputSize = props.inputSize,\n            label = props.label,\n            formLayout = props.formLayout,\n            refInput = props.refInput,\n            shouldRenderFeedback = props.shouldRenderFeedback,\n            type = props.type,\n            disable = props.disable,\n            inputTable = props.inputTable,\n            rest = _objectWithoutProperties(props, [\"inputSize\", \"label\", \"formLayout\", \"refInput\", \"shouldRenderFeedback\", \"type\", \"disable\", \"inputTable\"]);\n\n      const isTouched = getIn(touched, field.name);\n      let errorMessage = '';\n      let validateStatus = 'success';\n\n      if (isTouched) {\n        errorMessage = getIn(errors, field.name);\n\n        if (errorMessage) {\n          validateStatus = 'error';\n        }\n      }\n\n      return React.createElement(FormInputWrapperStyled, Object.assign({\n        label: label,\n        validateStatus: validateStatus,\n        error: errorMessage,\n        disabled: disable,\n        inputTable: inputTable\n      }, formLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(FormLabel, {\n        label: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(FormInputStyled, Object.assign({\n        ref: this.input\n      }, field, rest, {\n        type: type,\n        disabled: disable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      })), errorMessage && React.createElement(FormError, {\n        className: \"form-error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, errorMessage));\n    };\n\n    this.renderNumberInput = (_ref2) => {\n      let field = _ref2.field,\n          _ref2$form = _ref2.form,\n          touched = _ref2$form.touched,\n          errors = _ref2$form.errors,\n          props = _objectWithoutProperties(_ref2, [\"field\", \"form\"]);\n\n      const label = props.label,\n            formLayout = props.formLayout,\n            type = props.type,\n            rest = _objectWithoutProperties(props, [\"label\", \"formLayout\", \"type\"]);\n\n      const isTouched = getIn(touched, field.name);\n      let errorMessage = '';\n      let validateStatus = 'success';\n\n      if (isTouched) {\n        errorMessage = getIn(errors, field.name);\n\n        if (errorMessage) {\n          validateStatus = 'error';\n        }\n      }\n\n      return React.createElement(FormInputWrapperStyled, Object.assign({\n        label: label,\n        validateStatus: validateStatus,\n        error: errorMessage\n      }, formLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(FormLabel, {\n        label: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), React.createElement(FormInputStyled, Object.assign({\n        ref: this.input\n      }, field, rest, {\n        type: type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      })), errorMessage && React.createElement(FormError, {\n        className: \"form-error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, errorMessage));\n    };\n\n    this.renderCheckbox = (_ref3) => {\n      let field = _ref3.field,\n          form = _ref3.form,\n          props = _objectWithoutProperties(_ref3, [\"field\", \"form\"]);\n\n      const label = props.label,\n            handleChange = props.handleChange,\n            formLayout = props.formLayout,\n            type = props.type,\n            disable = props.disable;\n      const touched = form.touched,\n            errors = form.errors;\n      const isTouched = getIn(touched, field.name);\n      let errorMessage = '';\n      let validateStatus = 'success';\n\n      if (isTouched) {\n        errorMessage = getIn(errors, field.name);\n\n        if (errorMessage) {\n          validateStatus = 'error';\n        }\n      }\n\n      const onChange = e => {\n        if (typeof handleChange === 'function') {\n          handleChange();\n        }\n\n        field.onChange(e);\n      };\n\n      return React.createElement(FormInputWrapperStyled, Object.assign({\n        label: label,\n        validateStatus: validateStatus,\n        error: errorMessage,\n        disabled: disable\n      }, formLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), React.createElement(FormCheckboxStyled, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"input\", Object.assign({}, field, {\n        onChange: onChange,\n        checked: _.get(form, \"values.\".concat(field.name)),\n        type: type,\n        disabled: disable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        className: \"checkmark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, label)), errorMessage && React.createElement(FormError, {\n        className: \"form-error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, errorMessage));\n    };\n\n    this.renderSelect = (_ref4) => {\n      let field = _ref4.field,\n          form = _ref4.form,\n          formLayout = _ref4.formLayout,\n          isDisabled = _ref4.isDisabled,\n          onInputChange = _ref4.onInputChange,\n          selectedValue = _ref4.selectedValue,\n          props = _objectWithoutProperties(_ref4, [\"field\", \"form\", \"formLayout\", \"isDisabled\", \"onInputChange\", \"selectedValue\"]);\n\n      const disabled = props.disabled,\n            options = props.options,\n            label = props.label,\n            inputTable = props.inputTable,\n            handleChange = props.handleChange,\n            isMultiSelect = props.isMultiSelect,\n            rest = _objectWithoutProperties(props, [\"disabled\", \"options\", \"label\", \"inputTable\", \"handleChange\", \"isMultiSelect\"]); // required\n\n\n      const onChange = value => {\n        form.setFieldValue(field.name, value);\n\n        if (typeof handleChange === 'function') {\n          handleChange(value, form);\n        }\n      };\n\n      const touched = form.touched,\n            errors = form.errors;\n      const value = field.value;\n      const isTouched = getIn(touched, field.name);\n      let errorMessage = '';\n      let validateStatus = 'success';\n\n      if (isTouched) {\n        errorMessage = getIn(errors, field.name);\n\n        if (errorMessage) {\n          validateStatus = 'error';\n        }\n      }\n\n      return React.createElement(FormInputWrapperStyled, Object.assign({\n        label: label,\n        validateStatus: validateStatus,\n        error: errorMessage,\n        disabled: isDisabled,\n        inputTable: inputTable\n      }, formLayout, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }), React.createElement(FormLabel, {\n        label: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }), React.createElement(Select, Object.assign({}, field, {\n        options: options,\n        classNamePrefix: \"select\",\n        onChange: onChange,\n        disabled: disabled,\n        ref: this.input,\n        onInputChange: onInputChange,\n        value: value,\n        defaultValue: value,\n        isMulti: !!isMultiSelect\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      })), errorMessage && React.createElement(FormError, {\n        className: \"form-error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, errorMessage));\n    };\n\n    this.renderDatePicker = (_ref5) => {\n      let field = _ref5.field,\n          _ref5$form = _ref5.form,\n          touched = _ref5$form.touched,\n          errors = _ref5$form.errors,\n          setFieldValue = _ref5$form.setFieldValue,\n          formLayout = _ref5.formLayout,\n          label = _ref5.label,\n          minDate = _ref5.minDate,\n          rest = _objectWithoutProperties(_ref5, [\"field\", \"form\", \"formLayout\", \"label\", \"minDate\"]);\n\n      const onChange = date => {\n        setFieldValue(field.name, date === null ? '' : date);\n      };\n\n      const isTouched = getIn(touched, field.name);\n      let errorMessage = '';\n      let validateStatus = 'success';\n\n      if (isTouched) {\n        errorMessage = getIn(errors, field.name);\n\n        if (errorMessage) {\n          validateStatus = 'error';\n        }\n      }\n\n      return React.createElement(FormInputWrapperStyled, Object.assign({\n        label: label,\n        validateStatus: validateStatus,\n        error: errorMessage\n      }, formLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }), React.createElement(FormLabel, {\n        label: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }), React.createElement(DatePicker, Object.assign({\n        value: field.value,\n        selected: field.value,\n        onChange: onChange,\n        dateFormat: \"yyyy/MM/dd\",\n        ref: this.input,\n        minDate: new Date(minDate)\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      })), errorMessage && React.createElement(FormError, {\n        className: \"form-error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, errorMessage));\n    };\n\n    this.renderFormInput = props => {\n      const type = props.type;\n\n      switch (type) {\n        case INPUT_TYPES.TEXT:\n          return this.renderTextInput(props);\n\n        case INPUT_TYPES.NUMBER:\n          return this.renderNumberInput(props);\n\n        case INPUT_TYPES.PHONE_NUMBER:\n          return this.renderPhoneInput(props);\n\n        case INPUT_TYPES.CHECKBOX:\n          return this.renderCheckbox(props);\n\n        case INPUT_TYPES.SELECT:\n          return this.renderSelect(props);\n\n        case INPUT_TYPES.DATE_PICKER:\n          return this.renderDatePicker(props);\n\n        default:\n          return this.renderTextInput(props);\n      }\n    };\n\n    this.renderFormWrapper = fieldProps => {\n      const inputTable = this.props.inputTable;\n      return React.createElement(FormItem, {\n        inputTable: inputTable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, this.renderFormInput(fieldProps));\n    };\n\n    this.state = {\n      isFocus: false\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          regular = _this$props.regular,\n          rest = _objectWithoutProperties(_this$props, [\"regular\"]);\n\n    if (regular) {\n      return this.renderFormInput(this.props);\n    }\n\n    return React.createElement(Field, Object.assign({}, rest, {\n      component: this.renderFormWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }));\n  }\n\n}\n\nFormInput.propTypes = {\n  refInput: func,\n  formLayout: shape(),\n  regular: any,\n  type: string,\n  inputTable: bool\n};\nFormInput.defaultProps = {\n  formLayout: FORM_LAYOUT,\n  refInput: () => {}\n};\nexport default FormInput;","map":{"version":3,"sources":["/Users/mr942/Projects/mini-aspire/src/components/FormInput/FormInput.js"],"names":["React","func","bool","shape","any","string","Field","getIn","_","Select","DatePicker","FormLabel","FormItem","FormError","FormInputStyled","FormInputWrapperStyled","FormCheckboxStyled","INPUT_TYPES","TEXT","NUMBER","PHONE_NUMBER","CHECKBOX","SELECT","TEXT_AREA","DATE_PICKER","FORM_LAYOUT","labelCol","xs","sm","wrapperCol","FormInput","Component","constructor","props","renderTextInput","field","form","touched","errors","inputSize","label","formLayout","refInput","shouldRenderFeedback","type","disable","inputTable","rest","isTouched","name","errorMessage","validateStatus","input","renderNumberInput","renderCheckbox","handleChange","onChange","e","get","renderSelect","isDisabled","onInputChange","selectedValue","disabled","options","isMultiSelect","value","setFieldValue","renderDatePicker","minDate","date","Date","renderFormInput","renderPhoneInput","renderFormWrapper","fieldProps","state","isFocus","render","regular","propTypes","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  func, bool, shape, any, string,\n} from 'prop-types';\nimport { Field, getIn } from 'formik';\nimport _ from 'lodash';\nimport Select from 'react-select';\nimport DatePicker from 'react-datepicker';\nimport FormLabel from './FormLabel';\nimport {\n  FormItem,\n  FormError,\n  FormInputStyled,\n  FormInputWrapperStyled,\n  FormCheckboxStyled,\n} from './Form.style';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nexport const INPUT_TYPES = {\n  TEXT: 'text',\n  NUMBER: 'number',\n  PHONE_NUMBER: 'phoneNumber',\n  CHECKBOX: 'checkbox',\n  SELECT: 'select',\n  TEXT_AREA: 'textarea',\n  DATE_PICKER: 'date',\n};\n\nconst FORM_LAYOUT = {\n  labelCol: { xs: 24, sm: 24 },\n  wrapperCol: { xs: 24, sm: 24 },\n};\n\n\nclass FormInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFocus: false,\n    };\n  }\n\n  static propTypes = {\n    refInput: func,\n    formLayout: shape(),\n    regular: any,\n    type: string,\n    inputTable: bool,\n  }\n\n  static defaultProps = {\n    formLayout: FORM_LAYOUT,\n    refInput: () => { },\n  }\n\n  renderTextInput = ({\n    field, // { name, value, onChange, onBlur }\n    form: { touched, errors },\n    form,\n    ...props\n  }) => {\n    const {\n      inputSize,\n      label,\n      formLayout,\n      refInput,\n      shouldRenderFeedback,\n      type,\n      disable,\n      inputTable,\n      ...rest\n    } = props;\n\n    const isTouched = getIn(touched, field.name);\n    let errorMessage = '';\n    let validateStatus = 'success';\n    if (isTouched) {\n      errorMessage = getIn(errors, field.name);\n      if (errorMessage) {\n        validateStatus = 'error';\n      }\n    }\n\n    return (\n      <FormInputWrapperStyled\n        label={label}\n        validateStatus={validateStatus}\n        error={errorMessage}\n        disabled={disable}\n        inputTable={inputTable}\n        {...formLayout}\n      >\n        <FormLabel label={label} />\n        <FormInputStyled\n          ref={this.input}\n          {...field}\n          {...rest}\n          type={type}\n          disabled={disable}\n        />\n        {errorMessage && (\n          <FormError className=\"form-error\">{errorMessage}</FormError>\n        )}\n      </FormInputWrapperStyled>\n    );\n  };\n\n  renderNumberInput = ({\n    field, // { name, value, onChange, onBlur }\n    form: { touched, errors },\n    ...props\n  }) => {\n    const {\n      label,\n      formLayout,\n      type,\n      ...rest\n    } = props;\n\n    const isTouched = getIn(touched, field.name);\n    let errorMessage = '';\n    let validateStatus = 'success';\n\n    if (isTouched) {\n      errorMessage = getIn(errors, field.name);\n      if (errorMessage) {\n        validateStatus = 'error';\n      }\n    }\n\n    return (\n      <FormInputWrapperStyled\n        label={label}\n        validateStatus={validateStatus}\n        error={errorMessage}\n        {...formLayout}\n      >\n        <FormLabel label={label} />\n        <FormInputStyled\n          ref={this.input}\n          {...field}\n          {...rest}\n          type={type}\n        />\n        {errorMessage && (\n          <FormError className=\"form-error\">{errorMessage}</FormError>\n        )}\n      </FormInputWrapperStyled>\n    );\n  };\n\n  renderCheckbox = ({\n    field, // { name, value, onChange, onBlur }\n    form,\n    ...props\n  }) => {\n    const {\n      label,\n      handleChange,\n      formLayout,\n      type,\n      disable,\n    } = props;\n    const { touched, errors } = form;\n\n    const isTouched = getIn(touched, field.name);\n    let errorMessage = '';\n    let validateStatus = 'success';\n\n    if (isTouched) {\n      errorMessage = getIn(errors, field.name);\n      if (errorMessage) {\n        validateStatus = 'error';\n      }\n    }\n\n    const onChange = (e) => {\n      if (typeof handleChange === 'function') {\n        handleChange();\n      }\n      field.onChange(e);\n    };\n\n    return (\n      <FormInputWrapperStyled\n        label={label}\n        validateStatus={validateStatus}\n        error={errorMessage}\n        disabled={disable}\n        {...formLayout}\n      >\n        <FormCheckboxStyled>\n          <input\n            {...field}\n            onChange={onChange}\n            checked={_.get(form, `values.${field.name}`)}\n            type={type}\n            disabled={disable}\n          />\n          <span className=\"checkmark\" />\n          <span>{label}</span>\n        </FormCheckboxStyled>\n        {errorMessage && (\n          <FormError className=\"form-error\">{errorMessage}</FormError>\n        )}\n      </FormInputWrapperStyled>\n    );\n  };\n\n  renderSelect = ({\n    field, // { name, value, onChange, onBlur }\n    form,\n    formLayout,\n    isDisabled,\n    onInputChange,\n    selectedValue,\n    ...props\n  }) => {\n    const {\n      disabled,\n      options,\n      label,\n      inputTable,\n      handleChange,\n      isMultiSelect,\n      ...rest\n    } = props; // required\n\n    const onChange = (value) => {\n      form.setFieldValue(field.name, value);\n      if (typeof handleChange === 'function') {\n        handleChange(value, form);\n      }\n    };\n    const { touched, errors } = form;\n    const { value } = field;\n    const isTouched = getIn(touched, field.name);\n    let errorMessage = '';\n    let validateStatus = 'success';\n\n    if (isTouched) {\n      errorMessage = getIn(errors, field.name);\n      if (errorMessage) {\n        validateStatus = 'error';\n      }\n    }\n\n    return (\n      <FormInputWrapperStyled\n        label={label}\n        validateStatus={validateStatus}\n        error={errorMessage}\n        disabled={isDisabled}\n        inputTable={inputTable}\n        {...formLayout}\n        {...props}\n      >\n        <FormLabel label={label} />\n        <Select\n          {...field}\n          options={options}\n          classNamePrefix=\"select\"\n          onChange={onChange}\n          disabled={disabled}\n          ref={this.input}\n          onInputChange={onInputChange}\n          value={value}\n          defaultValue={value}\n          isMulti={!!isMultiSelect}\n          {...rest}\n        />\n        {errorMessage && (\n          <FormError className=\"form-error\">{errorMessage}</FormError>\n        )}\n      </FormInputWrapperStyled>\n    );\n  };\n\n  renderDatePicker = ({\n    field, // { name, value, onChange, onBlur }\n    form: { touched, errors, setFieldValue },\n    formLayout,\n    label,\n    minDate,\n    ...rest\n  }) => {\n    const onChange = (date) => {\n      setFieldValue(field.name, date === null ? '' : date);\n    };\n\n    const isTouched = getIn(touched, field.name);\n    let errorMessage = '';\n    let validateStatus = 'success';\n\n    if (isTouched) {\n      errorMessage = getIn(errors, field.name);\n      if (errorMessage) {\n        validateStatus = 'error';\n      }\n    }\n\n    return (\n      <FormInputWrapperStyled\n        label={label}\n        validateStatus={validateStatus}\n        error={errorMessage}\n        {...formLayout}\n      >\n        <FormLabel label={label} />\n        <DatePicker\n          value={field.value}\n          selected={field.value}\n          onChange={onChange}\n          dateFormat=\"yyyy/MM/dd\"\n          ref={this.input}\n          minDate={new Date(minDate)}\n          {...rest}\n        />\n        {errorMessage && (\n          <FormError className=\"form-error\">{errorMessage}</FormError>\n        )}\n      </FormInputWrapperStyled>\n    );\n  };\n\n  renderFormInput = (props) => {\n    const { type } = props;\n    switch (type) {\n      case INPUT_TYPES.TEXT:\n        return this.renderTextInput(props);\n      case INPUT_TYPES.NUMBER:\n        return this.renderNumberInput(props);\n      case INPUT_TYPES.PHONE_NUMBER:\n        return this.renderPhoneInput(props);\n      case INPUT_TYPES.CHECKBOX:\n        return this.renderCheckbox(props);\n      case INPUT_TYPES.SELECT:\n        return this.renderSelect(props);\n      case INPUT_TYPES.DATE_PICKER:\n        return this.renderDatePicker(props);\n      default:\n        return this.renderTextInput(props);\n    }\n  };\n\n  renderFormWrapper = (fieldProps) => {\n    const { inputTable } = this.props;\n    return (\n      <FormItem inputTable={inputTable}>\n        {this.renderFormInput(fieldProps)}\n      </FormItem>\n    );\n  }\n\n  render() {\n    const { regular, ...rest } = this.props;\n    if (regular) {\n      return this.renderFormInput(this.props);\n    }\n    return (\n      <Field\n        {...rest}\n        component={this.renderFormWrapper}\n      />\n    );\n  }\n}\n\nexport default FormInput;\n"]},"metadata":{},"sourceType":"module"}